---
title: "Program a Word Game"
format: html
---
### Load packages
```{r}
library(readr)
```

### Load data files

```{r}
f1 <- "https://raw.githubusercontent.com/difiore/ada-datasets/refs/heads/main/collins-scrabble-words-2019.txt"

f2 <- "https://raw.githubusercontent.com/difiore/ada-datasets/refs/heads/main/google-10000-english-usa-no-swears.txt"
```

```R
s <- read_csv(f1, col_names = TRUE)
g <- read_csv(f2, col_names = TRUE)
```
### Step 1: Defining and Using load_dictionary()
```{r}
#this function takes a single argument "filename" that can be used to read either data files s or g.
load_dictionary <- function(file_name) { #takes one argument "file_name"
  read_csv(file_name, col_names = TRUE) #reads file
}
```

```{r}
valid_list <- load_dictionary(f1) #variable valid_list assigned to function that reads in f1
solution_list <- load_dictionary(f2) #variable solution_list assigned to function that reads in f2
```

```R
str(valid_list)
str(solution_list)
```

### Step 2: Filtering solution_list with intersection()
```R
solution_list <- intersect(solution_list, valid_list) #this is currently not working, my solution list comes up as 0
length(solution_list)
```
```{r}
class(solution_list)
class(valid_list)
```
 
The two lists are currently data frames intersect() Performs set union, intersection, (asymmetric!) difference, equality and membership on two vectors. So the lists need to be converted from data frames to vectors

```{r}
#converts columns from solution_list and valid_list into vector while extracting column name words
solution_list <- as.character(solution_list$words) 
valid_list <- as.character(valid_list$words) 
```

```{r}
solution_list <- intersect(solution_list, valid_list) #finds common words between both lists and intersects them into new list as a vector
length(solution_list) #length of new list
```

```R
solution_list #does not display my output in Quarto documnet because of length, but used to check what my list looks like
```
### Step 3: Selecting and Splitting a Random Solution Word
```{r}
#This function takes two arguments word_list: list of words, and word_length: the length of words we want
pick_solution <- function(word_list, word_length = 5) {
  
  #filter the word list to include only words of length of specified length, in this case 5
  filtered_words <- word_list[nchar(word_list) == word_length]
  
  #randomly select one word from list of filtered words of length 5
  chosen_word <- sample(filtered_words, 1) #the sample() function picks one random word
  
  #split the chosen words into individual letters
  split_word <- strsplit(chosen_word, "")[[1]] #strsplit() returns a list, so we extract the first element
  
  return(split_word)
}
```

```{r}
#testing pick_solution() function
solution_test <- pick_solution(solution_list)
print(solution_test)
```